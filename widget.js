(()=>{"use strict";var n={526:(n,t,e)=>{e.d(t,{Z:()=>A});var o=e(15),r=e.n(o),a=e(645),i=e.n(a)()(r());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap);"]),i.push([n.id,"/* Container */\n.tlgc {\n  position: fixed;\n  z-index: 10002;\n  bottom: 0;\n  right: 0;\n  left: auto;\n  top: auto;\n  content: '';\n  padding: 12px;\n}\n\n/* Message above icon */\n.tlgc .tlgm {\n  position: relative;\n  font-size: 14px;\n  background-color: #fff;\n  font-family: 'Open Sans', sans-serif;\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n  padding: 15px 20px;\n  padding-right: 30px;\n  border-radius: 8px;\n  color: #525252;\n  font-weight: 600;\n  margin-bottom: 12px;\n  max-width: 450px;\n  width: auto;\n  display: none;\n  animation-duration: 0.5s;\n  animation-fill-mode: both;\n  animation-delay: 0.5s;\n}\n\n/* Close button */\n.tlgc .tlgm span {\n  content: '';\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  right: 15px;\n  top: 15px;\n  left: auto;\n}\n.tlgc .tlgm span:hover {\n  cursor: pointer;\n}\n.tlgc .tlgm span::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 10px;\n  height: 2px;\n  background-color: #979797;\n  transform: rotate(45deg);\n}\n.tlgc .tlgm span::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 10px;\n  height: 2px;\n  background-color: #979797;\n  transform: rotate(-45deg);\n}\n\n/* Button */\n.tlgc .telewidget-button {\n  content: '';\n  width: 48px;\n  height: 48px;\n  position: relative;\n  float: right;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: 0.1s linear;\n  animation-duration: 0.5s;\n  animation-fill-mode: both;\n}\n.tlgc .telewidget-button::before {\n  content: '';\n  position: absolute;\n  border-radius: 50%;\n  z-index: 10000;\n  width: 100%;\n  height: 100%;\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n}\n.tlgc .telewidget-button img {\n  z-index: 10001;\n  transition: 0.1s linear;\n  margin: 0 !important;\n  padding: 0 !important;\n  max-width: 100%;\n}\n.tlgc .telewidget-button:hover img {\n  cursor: pointer;\n  transform: scale(1.1);\n}\n\n/* POSITION THE WIDGET TO THE LEFT */\n.tlgc.left {\n  left: 0;\n  width: auto;\n  right: initial;\n}\n.tlgc.left .telewidget-button {\n  float: left;\n}\n\n/* SHOW WIDGET ON MOBILES DIVICES */\n.tlgc.show-message-always .tlgm {\n  display: block;\n}\n\n/* Dark theme */\n.tlgc.dark .tlgm {\n  font-size: 14px;\n  background-color: #081131;\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n  color: #eeeeee;\n}\n.tlgc.dark .telewidget-button::before {\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n}\n.tlgc.dark .tlgm span::after {\n  background-color: #e2e2e2;\n}\n.tlgc.dark .tlgm span::before {\n  background-color: #e2e2e2;\n}\n\n/* Tablets */\n@media only screen and (min-width: 768px) {\n  .tlgc .tlgm span {\n    right: 10px;\n  }\n  .tlgc .tlgm {\n    display: block;\n  }\n}\n\n@keyframes zoomIn {\n  from {\n    transform: scale(0.2);\n    opacity: 0;\n  }\n}\n@keyframes slide {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n}\n\n/* Classes for animations */\n.zoomIn {\n  animation-name: zoomIn;\n}\n.slide {\n  animation-name: slide;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  font-family: Gotham Rounded, sans-serif;\n  font-weight: normal;\n}\n\nbody {\n  padding: 0;\n  margin: 0;\n  background: linear-gradient(to right, #00aaff, #00ff6c);\n}\n\n.calculator-grid {\n  display: grid;\n  justify-content: center;\n  align-content: center;\n  min-height: 1vh;\n  max-width: 51.3vh;\n  /* width: 28.2%; */\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;\n  grid-gap: 1px;\n  grid-template-columns: repeat(4, 100px);\n  grid-template-rows: minmax(120px, auto) repeat(5, 100px);\n}\n\n.calculator-grid > button {\n  cursor: pointer;\n  font-size: 2rem;\n  border: 1px solid white;\n  outline: none;\n  background-color: rgba(255, 255, 255, 0.75);\n}\n\n.calculator-grid > button:hover {\n  background-color: rgba(255, 255, 255, 0.9);\n}\n\n.span-two {\n  grid-column: span 2;\n}\n\n.output {\n  grid-column: 1 / -1;\n  background-color: rgba(0, 0, 0, 0.75);\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-around;\n  flex-direction: column;\n  padding: 10px;\n  word-wrap: break-word;\n  word-break: break-all;\n}\n\n.output .previous-operand {\n  color: rgba(255, 255, 255, 0.75);\n  font-size: 1.5rem;\n}\n\n.output .current-operand {\n  color: white;\n  font-size: 2.5rem;\n}\n","",{version:3,sources:["webpack://./src/views/message.css"],names:[],mappings:"AAEA,cAAc;AACd;EACE,eAAe;EACf,cAAc;EACd,SAAS;EACT,QAAQ;EACR,UAAU;EACV,SAAS;EACT,WAAW;EACX,aAAa;AACf;;AAEA,uBAAuB;AACvB;EACE,kBAAkB;EAClB,eAAe;EACf,sBAAsB;EACtB,oCAAoC;EACpC,8CAA8C;EAC9C,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,cAAc;EACd,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;EAChB,WAAW;EACX,aAAa;EACb,wBAAwB;EACxB,yBAAyB;EACzB,qBAAqB;AACvB;;AAEA,iBAAiB;AACjB;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,WAAW;EACX,SAAS;EACT,UAAU;AACZ;AACA;EACE,eAAe;AACjB;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,wBAAwB;AAC1B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,yBAAyB;AAC3B;;AAEA,WAAW;AACX;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,uBAAuB;EACvB,wBAAwB;EACxB,yBAAyB;AAC3B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,cAAc;EACd,WAAW;EACX,YAAY;EACZ,8CAA8C;AAChD;AACA;EACE,cAAc;EACd,uBAAuB;EACvB,oBAAoB;EACpB,qBAAqB;EACrB,eAAe;AACjB;AACA;EACE,eAAe;EACf,qBAAqB;AACvB;;AAEA,oCAAoC;AACpC;EACE,OAAO;EACP,WAAW;EACX,cAAc;AAChB;AACA;EACE,WAAW;AACb;;AAEA,mCAAmC;AACnC;EACE,cAAc;AAChB;;AAEA,eAAe;AACf;EACE,eAAe;EACf,yBAAyB;EACzB,8CAA8C;EAC9C,cAAc;AAChB;AACA;EACE,8CAA8C;AAChD;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB;AAC3B;;AAEA,YAAY;AACZ;EACE;IACE,WAAW;EACb;EACA;IACE,cAAc;EAChB;AACF;;AAEA;EACE;IACE,qBAAqB;IACrB,UAAU;EACZ;AACF;AACA;EACE;IACE,2BAA2B;IAC3B,UAAU;EACZ;AACF;;AAEA,2BAA2B;AAC3B;EACE,sBAAsB;AACxB;AACA;EACE,qBAAqB;AACvB;;AAEA;;;EAGE,sBAAsB;EACtB,uCAAuC;EACvC,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,SAAS;EACT,uDAAuD;AACzD;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,qBAAqB;EACrB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,qCAAqC;EACrC,2CAA2C;EAC3C,aAAa;EACb,uCAAuC;EACvC,wDAAwD;AAC1D;;AAEA;EACE,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,aAAa;EACb,2CAA2C;AAC7C;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,qCAAqC;EACrC,aAAa;EACb,qBAAqB;EACrB,6BAA6B;EAC7B,sBAAsB;EACtB,aAAa;EACb,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,gCAAgC;EAChC,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap');\n\n/* Container */\n.tlgc {\n  position: fixed;\n  z-index: 10002;\n  bottom: 0;\n  right: 0;\n  left: auto;\n  top: auto;\n  content: '';\n  padding: 12px;\n}\n\n/* Message above icon */\n.tlgc .tlgm {\n  position: relative;\n  font-size: 14px;\n  background-color: #fff;\n  font-family: 'Open Sans', sans-serif;\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n  padding: 15px 20px;\n  padding-right: 30px;\n  border-radius: 8px;\n  color: #525252;\n  font-weight: 600;\n  margin-bottom: 12px;\n  max-width: 450px;\n  width: auto;\n  display: none;\n  animation-duration: 0.5s;\n  animation-fill-mode: both;\n  animation-delay: 0.5s;\n}\n\n/* Close button */\n.tlgc .tlgm span {\n  content: '';\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  right: 15px;\n  top: 15px;\n  left: auto;\n}\n.tlgc .tlgm span:hover {\n  cursor: pointer;\n}\n.tlgc .tlgm span::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 10px;\n  height: 2px;\n  background-color: #979797;\n  transform: rotate(45deg);\n}\n.tlgc .tlgm span::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 10px;\n  height: 2px;\n  background-color: #979797;\n  transform: rotate(-45deg);\n}\n\n/* Button */\n.tlgc .telewidget-button {\n  content: '';\n  width: 48px;\n  height: 48px;\n  position: relative;\n  float: right;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: 0.1s linear;\n  animation-duration: 0.5s;\n  animation-fill-mode: both;\n}\n.tlgc .telewidget-button::before {\n  content: '';\n  position: absolute;\n  border-radius: 50%;\n  z-index: 10000;\n  width: 100%;\n  height: 100%;\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n}\n.tlgc .telewidget-button img {\n  z-index: 10001;\n  transition: 0.1s linear;\n  margin: 0 !important;\n  padding: 0 !important;\n  max-width: 100%;\n}\n.tlgc .telewidget-button:hover img {\n  cursor: pointer;\n  transform: scale(1.1);\n}\n\n/* POSITION THE WIDGET TO THE LEFT */\n.tlgc.left {\n  left: 0;\n  width: auto;\n  right: initial;\n}\n.tlgc.left .telewidget-button {\n  float: left;\n}\n\n/* SHOW WIDGET ON MOBILES DIVICES */\n.tlgc.show-message-always .tlgm {\n  display: block;\n}\n\n/* Dark theme */\n.tlgc.dark .tlgm {\n  font-size: 14px;\n  background-color: #081131;\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n  color: #eeeeee;\n}\n.tlgc.dark .telewidget-button::before {\n  box-shadow: 1px 2px 8px rgba(70, 70, 70, 0.25);\n}\n.tlgc.dark .tlgm span::after {\n  background-color: #e2e2e2;\n}\n.tlgc.dark .tlgm span::before {\n  background-color: #e2e2e2;\n}\n\n/* Tablets */\n@media only screen and (min-width: 768px) {\n  .tlgc .tlgm span {\n    right: 10px;\n  }\n  .tlgc .tlgm {\n    display: block;\n  }\n}\n\n@keyframes zoomIn {\n  from {\n    transform: scale(0.2);\n    opacity: 0;\n  }\n}\n@keyframes slide {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n}\n\n/* Classes for animations */\n.zoomIn {\n  animation-name: zoomIn;\n}\n.slide {\n  animation-name: slide;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  font-family: Gotham Rounded, sans-serif;\n  font-weight: normal;\n}\n\nbody {\n  padding: 0;\n  margin: 0;\n  background: linear-gradient(to right, #00aaff, #00ff6c);\n}\n\n.calculator-grid {\n  display: grid;\n  justify-content: center;\n  align-content: center;\n  min-height: 1vh;\n  max-width: 51.3vh;\n  /* width: 28.2%; */\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;\n  grid-gap: 1px;\n  grid-template-columns: repeat(4, 100px);\n  grid-template-rows: minmax(120px, auto) repeat(5, 100px);\n}\n\n.calculator-grid > button {\n  cursor: pointer;\n  font-size: 2rem;\n  border: 1px solid white;\n  outline: none;\n  background-color: rgba(255, 255, 255, 0.75);\n}\n\n.calculator-grid > button:hover {\n  background-color: rgba(255, 255, 255, 0.9);\n}\n\n.span-two {\n  grid-column: span 2;\n}\n\n.output {\n  grid-column: 1 / -1;\n  background-color: rgba(0, 0, 0, 0.75);\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-around;\n  flex-direction: column;\n  padding: 10px;\n  word-wrap: break-word;\n  word-break: break-all;\n}\n\n.output .previous-operand {\n  color: rgba(255, 255, 255, 0.75);\n  font-size: 1.5rem;\n}\n\n.output .current-operand {\n  color: white;\n  font-size: 2.5rem;\n}\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);o&&r[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=new Array(t);e<t;e++)o[e]=n[e];return o}n.exports=function(n){var e,o,r=(o=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var o,r,a=[],i=!0,A=!1;try{for(e=e.call(n);!(i=(o=e.next()).done)&&(a.push(o.value),!t||a.length!==t);i=!0);}catch(n){A=!0,r=n}finally{try{i||null==e.return||e.return()}finally{if(A)throw r}}return a}}(e,o)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(n,e):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),l="/*# ".concat(s," */"),c=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(c).concat([l]).join("\n")}return[a].join("\n")}},379:(n,t,e)=>{var o,r=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),a=[];function i(n){for(var t=-1,e=0;e<a.length;e++)if(a[e].identifier===n){t=e;break}return t}function A(n,t){for(var e={},o=[],r=0;r<n.length;r++){var A=n[r],s=t.base?A[0]+t.base:A[0],l=e[s]||0,c="".concat(s," ").concat(l);e[s]=l+1;var d=i(c),u={css:A[1],media:A[2],sourceMap:A[3]};-1!==d?(a[d].references++,a[d].updater(u)):a.push({identifier:c,updater:m(u,t),references:1}),o.push(c)}return o}function s(n){var t=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var a=e.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(n){t.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(t);else{var i=r(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,c=(l=[],function(n,t){return l[n]=t,l.filter(Boolean).join("\n")});function d(n,t,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=c(t,r);else{var a=document.createTextNode(r),i=n.childNodes;i[t]&&n.removeChild(i[t]),i.length?n.insertBefore(a,i[t]):n.appendChild(a)}}function u(n,t,e){var o=e.css,r=e.media,a=e.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var p=null,g=0;function m(n,t){var e,o,r;if(t.singleton){var a=g++;e=p||(p=s(t)),o=d.bind(null,e,a,!1),r=d.bind(null,e,a,!0)}else e=s(t),o=u.bind(null,e,t),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else r()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var e=A(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<e.length;o++){var r=i(e[o]);a[r].references--}for(var s=A(n,t),l=0;l<e.length;l++){var c=i(e[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}e=s}}}}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return n[o](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{const n='<div class="tlgc"> <div class="tlgm"></div> <a target="_blank" rel="nofollow" class="telewidget-button"> <img src="https://cdn.jsdelivr.net/gh/mascarell/telewidget/assets/telegram.svg" alt="TeleWidget Icon"/> </a> </div> <div class="calculator-grid"> <div class="output"> <div data-previous-operand class="previous-operand"></div> <div data-current-operand class="current-operand"></div> </div> <button data-all-clear class="span-two">AC</button> <button data-delete>DEL</button> <button data-operation>÷</button> <button data-number>1</button> <button data-number>2</button> <button data-number>3</button> <button data-operation>*</button> <button data-number>4</button> <button data-number>5</button> <button data-number>6</button> <button data-operation>+</button> <button data-number>7</button> <button data-number>8</button> <button data-number>9</button> <button data-operation>-</button> <button data-number>.</button> <button data-number>0</button> <button data-equals class="span-two">=</button> </div> ';var t=e(379),o=e.n(t),r=e(526);function a(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}o()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var i,A=document.createElement("div");A.innerHTML=n;var s=A.querySelector(".tlgc"),l=[];function c(){s.querySelector(".tlgm").style.display="none"}var d=["config"];function u(t,e){if(!t)throw Error("API method required");if(t=t.toLowerCase(),-1===d.indexOf(t))throw Error("Method ".concat(t," is not supported"));"config"===t?function(t){var e,o,r=document.createElement("div");for(r.innerHTML=n,t.useAnimations&&(s.querySelector(".tlgm").classList.add("slide"),s.querySelector(".telewidget-button").classList.add("zoomIn")),i=document.getElementsByTagName("body")[0];r.children.length>0;)l.push(r.children[0]),i.appendChild(r.children[0]);if(t.useDarkTheme&&s.classList.add("dark"),t.message?t.useCookies&&null==document.cookie.match(/^(.*;)?\s*showmessage\s*=\s*[^;]+(.*)?$/)?(s.querySelector(".tlgm").innerHTML="".concat(t.message," <span></span>"),s.querySelector(".tlgm span").addEventListener("click",c),console.log("creating cookie"),(e=new Date).setTime(e.getTime()+864e5),o="; expires="+e.toGMTString(),document.cookie="showmessage=no"+o+"; path=/"):t.useCookies?s.querySelector(".tlgm").remove():(s.querySelector(".tlgm").innerHTML="".concat(t.message," <span></span>"),s.querySelector(".tlgm span").addEventListener("click",c)):s.querySelector(".tlgm").remove(),t.users)try{var A=t.users[Math.floor(Math.random()*t.users.length)];s.querySelector(".telewidget-button").href="https://t.me/".concat(A)}catch(n){console.error("telewidget -> cannot select users")}t.floatLeft&&s.classList.add("left"),t.showMessageAlways&&s.classList.add("show-message-always"),(i=document.getElementsByTagName("body")[0]).appendChild(s);var d=function(){function n(t,e){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.previousOperandTextElement=t,this.currentOperandTextElement=e,this.clear()}var t;return(t=[{key:"clear",value:function(){this.currentOperand="",this.previousOperand="",this.operation=void 0}},{key:"delete",value:function(){this.currentOperand=this.currentOperand.toString().slice(0,-1)}},{key:"appendNumber",value:function(n){"."===n&&this.currentOperand.includes(".")||(this.currentOperand=this.currentOperand.toString()+n.toString())}},{key:"chooseOperation",value:function(n){""!==this.currentOperand&&(""!==this.previousOperand&&this.compute(),this.operation=n,this.previousOperand=this.currentOperand,this.currentOperand="")}},{key:"compute",value:function(){var n,t=parseFloat(this.previousOperand),e=parseFloat(this.currentOperand);if(!isNaN(t)&&!isNaN(e)){switch(this.operation){case"+":n=t+e;break;case"-":n=t-e;break;case"*":n=t*e;break;case"÷":n=t/e;break;default:return}this.currentOperand=n,this.operation=void 0,this.previousOperand=""}}},{key:"getDisplayNumber",value:function(n){var t,e=n.toString(),o=parseFloat(e.split(".")[0]),r=e.split(".")[1];return t=isNaN(o)?"":o.toLocaleString("en",{maximumFractionDigits:0}),null!=r?"".concat(t,".").concat(r):t}},{key:"updateDisplay",value:function(){this.currentOperandTextElement.innerText=this.getDisplayNumber(this.currentOperand),null!=this.operation?this.previousOperandTextElement.innerText="".concat(this.getDisplayNumber(this.previousOperand)," ").concat(this.operation):this.previousOperandTextElement.innerText=""}}])&&a(n.prototype,t),n}(),u=document.querySelectorAll("[data-number]"),p=document.querySelectorAll("[data-operation]"),g=document.querySelector("[data-equals]"),m=document.querySelector("[data-delete]"),f=document.querySelector("[data-all-clear]"),C=new d(document.querySelector("[data-previous-operand]"),document.querySelector("[data-current-operand]"));u.forEach((function(n){n.addEventListener("click",(function(){C.appendNumber(n.innerText),C.updateDisplay()}))})),p.forEach((function(n){n.addEventListener("click",(function(){C.chooseOperation(n.innerText),C.updateDisplay()}))})),g.addEventListener("click",(function(n){C.compute(),C.updateDisplay()})),f.addEventListener("click",(function(n){C.clear(),C.updateDisplay()})),m.addEventListener("click",(function(n){C.delete(),C.updateDisplay()})),i.addEventListener("click",close)}(e):console.warn("No handler defined for ".concat(t))}!function(n){var t=n[n.ww],e=t.q;if(e)for(var o=0;o<e.length;o++)u(e[o][0],e[o][1]);(t=u).configurations={message:!1,users:!1,floatLeft:!1,showMessageAlways:!1,useCookies:!1,useAnimations:!1,useDarkTheme:!1}}(window)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,