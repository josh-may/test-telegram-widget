(()=>{"use strict";var n={526:(n,t,e)=>{e.d(t,{Z:()=>i});var o=e(15),a=e.n(o),r=e(645),A=e.n(r)()(a());A.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap);"]),A.push([n.id,"/* Container */\n.tlgc{\n  position: fixed;\n  z-index: 10002;\n  bottom: 0; right: 0; left: auto; top: auto;\n  content: '';\n  padding: 12px;\n}\n\n/* Message above icon */\n.tlgc .tlgm{\n  position: relative;\n  font-size: 14px; background-color: #fff;\n  font-family: 'Open Sans', sans-serif;\n  box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n  padding: 15px 20px; padding-right: 30px;\n  border-radius: 8px;\n  color: #525252;\n  font-weight: 600;\n  margin-bottom: 12px;\n  max-width: 450px;\n  width: auto;\n\tdisplay: none;\n\tanimation-duration: .5s;\n\tanimation-fill-mode: both;\n\tanimation-delay: 1s;\n}\n\n/* Close button */\n.tlgc .tlgm span{ \n\tcontent: ''; \n\tposition: absolute; \n\twidth: 10px; \n\theight: 10px; \n\tright: 15px; \n\ttop: 15px; \n\tleft: auto; \n}\n.tlgc .tlgm span:hover{ cursor: pointer; }\n.tlgc .tlgm span::after{ \n\tcontent: ''; \n\tposition: absolute; \n\ttop: 0; \n\tleft: 0; \n\twidth: 10px; \n\theight: 2px; \n\tbackground-color: #979797; \n\ttransform: rotate(45deg); \n}\n.tlgc .tlgm span::before{ \n\tcontent: ''; \n\tposition: absolute; \n\ttop: 0; \n\tleft: 0; \n\twidth: 10px; \n\theight: 2px; \n\tbackground-color: #979797; \n\ttransform: rotate(-45deg); \n}\n\n/* Button */\n.tlgc .telewidget-button{\n    content: '';\n    width: 48px; height: 48px;\n    position: relative;\n    float: right;\n    display: flex; justify-content: center; align-items: center;\n    transition: .1s linear;\n\tanimation-duration: .5s;\n\tanimation-fill-mode: both;\n}\n.tlgc .telewidget-button::before{ \n    content: ''; position: absolute;\n    border-radius: 50%;\n    z-index: 10000;\n    width: 100%; height: 100%;\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n}\n.tlgc .telewidget-button img{ \n    z-index: 10001;\n    transition: .1s linear;\n    margin: 0 !important; padding: 0 !important;\n    max-width: 100%; \n}\n.tlgc .telewidget-button:hover img{\n    cursor: pointer;\n    transform: scale(1.1);\n}\n\n/* POSITION THE WIDGET TO THE LEFT */\n.tlgc.left{ left: 0; width: auto; right: initial; }\n.tlgc.left .telewidget-button{ float: left; }\n\n/* SHOW WIDGET ON MOBILES DIVICES */\n.tlgc.show-message-always .tlgm{ display: block; }\n\n/* Dark theme */\n.tlgc.dark .tlgm{\n    font-size: 14px; background-color: #081131;\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n    color: #eeeeee;\n}\n.tlgc.dark .telewidget-button::before{ \n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n}\n.tlgc.dark .tlgm span::after{ \n\tbackground-color: #e2e2e2; \n}\n.tlgc.dark .tlgm span::before{ \n\tbackground-color: #e2e2e2; \n}\n\n/* Tablets */\n@media only screen and (min-width : 768px) \n{\n    .tlgc .tlgm span{ right: 10px;}\n    .tlgc .tlgm{ display: block; }\n}\n\n@keyframes zoomIn {\n    from {\n        transform: scale(.2);\n        opacity: 0;\n    }\n}\n@keyframes slide {\n    from {\n        transform: translateY(20px);\n        opacity: 0;\n    }\n}\n\n/* Classes for animations */\n.zoomIn { animation-name: zoomIn; }\n.slide { animation-name: slide; }","",{version:3,sources:["webpack://./src/views/message.css"],names:[],mappings:"AAEA,cAAc;AACd;EACE,eAAe;EACf,cAAc;EACd,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS;EAC1C,WAAW;EACX,aAAa;AACf;;AAEA,uBAAuB;AACvB;EACE,kBAAkB;EAClB,eAAe,EAAE,sBAAsB;EACvC,oCAAoC;EACpC,0CAA0C;EAC1C,kBAAkB,EAAE,mBAAmB;EACvC,kBAAkB;EAClB,cAAc;EACd,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;EAChB,WAAW;CACZ,aAAa;CACb,uBAAuB;CACvB,yBAAyB;CACzB,mBAAmB;AACpB;;AAEA,iBAAiB;AACjB;CACC,WAAW;CACX,kBAAkB;CAClB,WAAW;CACX,YAAY;CACZ,WAAW;CACX,SAAS;CACT,UAAU;AACX;AACA,wBAAwB,eAAe,EAAE;AACzC;CACC,WAAW;CACX,kBAAkB;CAClB,MAAM;CACN,OAAO;CACP,WAAW;CACX,WAAW;CACX,yBAAyB;CACzB,wBAAwB;AACzB;AACA;CACC,WAAW;CACX,kBAAkB;CAClB,MAAM;CACN,OAAO;CACP,WAAW;CACX,WAAW;CACX,yBAAyB;CACzB,yBAAyB;AAC1B;;AAEA,WAAW;AACX;IACI,WAAW;IACX,WAAW,EAAE,YAAY;IACzB,kBAAkB;IAClB,YAAY;IACZ,aAAa,EAAE,uBAAuB,EAAE,mBAAmB;IAC3D,sBAAsB;CACzB,uBAAuB;CACvB,yBAAyB;AAC1B;AACA;IACI,WAAW,EAAE,kBAAkB;IAC/B,kBAAkB;IAClB,cAAc;IACd,WAAW,EAAE,YAAY;IACzB,0CAA0C;AAC9C;AACA;IACI,cAAc;IACd,sBAAsB;IACtB,oBAAoB,EAAE,qBAAqB;IAC3C,eAAe;AACnB;AACA;IACI,eAAe;IACf,qBAAqB;AACzB;;AAEA,oCAAoC;AACpC,YAAY,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE;AAClD,+BAA+B,WAAW,EAAE;;AAE5C,mCAAmC;AACnC,iCAAiC,cAAc,EAAE;;AAEjD,eAAe;AACf;IACI,eAAe,EAAE,yBAAyB;IAC1C,0CAA0C;IAC1C,cAAc;AAClB;AACA;IACI,0CAA0C;AAC9C;AACA;CACC,yBAAyB;AAC1B;AACA;CACC,yBAAyB;AAC1B;;AAEA,YAAY;AACZ;;IAEI,kBAAkB,WAAW,CAAC;IAC9B,aAAa,cAAc,EAAE;AACjC;;AAEA;IACI;QACI,oBAAoB;QACpB,UAAU;IACd;AACJ;AACA;IACI;QACI,2BAA2B;QAC3B,UAAU;IACd;AACJ;;AAEA,2BAA2B;AAC3B,UAAU,sBAAsB,EAAE;AAClC,SAAS,qBAAqB,EAAE",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@600&display=swap');\n\n/* Container */\n.tlgc{\n  position: fixed;\n  z-index: 10002;\n  bottom: 0; right: 0; left: auto; top: auto;\n  content: '';\n  padding: 12px;\n}\n\n/* Message above icon */\n.tlgc .tlgm{\n  position: relative;\n  font-size: 14px; background-color: #fff;\n  font-family: 'Open Sans', sans-serif;\n  box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n  padding: 15px 20px; padding-right: 30px;\n  border-radius: 8px;\n  color: #525252;\n  font-weight: 600;\n  margin-bottom: 12px;\n  max-width: 450px;\n  width: auto;\n\tdisplay: none;\n\tanimation-duration: .5s;\n\tanimation-fill-mode: both;\n\tanimation-delay: 1s;\n}\n\n/* Close button */\n.tlgc .tlgm span{ \n\tcontent: ''; \n\tposition: absolute; \n\twidth: 10px; \n\theight: 10px; \n\tright: 15px; \n\ttop: 15px; \n\tleft: auto; \n}\n.tlgc .tlgm span:hover{ cursor: pointer; }\n.tlgc .tlgm span::after{ \n\tcontent: ''; \n\tposition: absolute; \n\ttop: 0; \n\tleft: 0; \n\twidth: 10px; \n\theight: 2px; \n\tbackground-color: #979797; \n\ttransform: rotate(45deg); \n}\n.tlgc .tlgm span::before{ \n\tcontent: ''; \n\tposition: absolute; \n\ttop: 0; \n\tleft: 0; \n\twidth: 10px; \n\theight: 2px; \n\tbackground-color: #979797; \n\ttransform: rotate(-45deg); \n}\n\n/* Button */\n.tlgc .telewidget-button{\n    content: '';\n    width: 48px; height: 48px;\n    position: relative;\n    float: right;\n    display: flex; justify-content: center; align-items: center;\n    transition: .1s linear;\n\tanimation-duration: .5s;\n\tanimation-fill-mode: both;\n}\n.tlgc .telewidget-button::before{ \n    content: ''; position: absolute;\n    border-radius: 50%;\n    z-index: 10000;\n    width: 100%; height: 100%;\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n}\n.tlgc .telewidget-button img{ \n    z-index: 10001;\n    transition: .1s linear;\n    margin: 0 !important; padding: 0 !important;\n    max-width: 100%; \n}\n.tlgc .telewidget-button:hover img{\n    cursor: pointer;\n    transform: scale(1.1);\n}\n\n/* POSITION THE WIDGET TO THE LEFT */\n.tlgc.left{ left: 0; width: auto; right: initial; }\n.tlgc.left .telewidget-button{ float: left; }\n\n/* SHOW WIDGET ON MOBILES DIVICES */\n.tlgc.show-message-always .tlgm{ display: block; }\n\n/* Dark theme */\n.tlgc.dark .tlgm{\n    font-size: 14px; background-color: #081131;\n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n    color: #eeeeee;\n}\n.tlgc.dark .telewidget-button::before{ \n    box-shadow: 1px 2px 8px rgba(70,70,70,.25);\n}\n.tlgc.dark .tlgm span::after{ \n\tbackground-color: #e2e2e2; \n}\n.tlgc.dark .tlgm span::before{ \n\tbackground-color: #e2e2e2; \n}\n\n/* Tablets */\n@media only screen and (min-width : 768px) \n{\n    .tlgc .tlgm span{ right: 10px;}\n    .tlgc .tlgm{ display: block; }\n}\n\n@keyframes zoomIn {\n    from {\n        transform: scale(.2);\n        opacity: 0;\n    }\n}\n@keyframes slide {\n    from {\n        transform: translateY(20px);\n        opacity: 0;\n    }\n}\n\n/* Classes for animations */\n.zoomIn { animation-name: zoomIn; }\n.slide { animation-name: slide; }"],sourceRoot:""}]);const i=A},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,o){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(o)for(var r=0;r<this.length;r++){var A=this[r][0];null!=A&&(a[A]=!0)}for(var i=0;i<n.length;i++){var s=[].concat(n[i]);o&&a[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=new Array(t);e<t;e++)o[e]=n[e];return o}n.exports=function(n){var e,o,a=(o=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var o,a,r=[],A=!0,i=!1;try{for(e=e.call(n);!(A=(o=e.next()).done)&&(r.push(o.value),!t||r.length!==t);A=!0);}catch(n){i=!0,a=n}finally{try{A||null==e.return||e.return()}finally{if(i)throw a}}return r}}(e,o)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(n,e):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=a[1],A=a[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),l="/*# ".concat(s," */"),c=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[r].concat(c).concat([l]).join("\n")}return[r].join("\n")}},379:(n,t,e)=>{var o,a=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),r=[];function A(n){for(var t=-1,e=0;e<r.length;e++)if(r[e].identifier===n){t=e;break}return t}function i(n,t){for(var e={},o=[],a=0;a<n.length;a++){var i=n[a],s=t.base?i[0]+t.base:i[0],l=e[s]||0,c="".concat(s," ").concat(l);e[s]=l+1;var d=A(c),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(r[d].references++,r[d].updater(p)):r.push({identifier:c,updater:C(p,t),references:1}),o.push(c)}return o}function s(n){var t=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var r=e.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(n){t.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(t);else{var A=a(n.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(t)}return t}var l,c=(l=[],function(n,t){return l[n]=t,l.filter(Boolean).join("\n")});function d(n,t,e,o){var a=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=c(t,a);else{var r=document.createTextNode(a),A=n.childNodes;A[t]&&n.removeChild(A[t]),A.length?n.insertBefore(r,A[t]):n.appendChild(r)}}function p(n,t,e){var o=e.css,a=e.media,r=e.sourceMap;if(a?n.setAttribute("media",a):n.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var u=null,g=0;function C(n,t){var e,o,a;if(t.singleton){var r=g++;e=u||(u=s(t)),o=d.bind(null,e,r,!1),a=d.bind(null,e,r,!0)}else e=s(t),o=p.bind(null,e,t),a=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else a()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var e=i(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<e.length;o++){var a=A(e[o]);r[a].references--}for(var s=i(n,t),l=0;l<e.length;l++){var c=A(e[l]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}e=s}}}}},t={};function e(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return n[o](r,r.exports,e),r.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),o=e(526);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;var a=document.createElement("div");a.innerHTML='<div class="tlgc"> <div class="tlgm"></div> <a target="_blank" rel="nofollow" class="telewidget-button"><img src="https://cdn.jsdelivr.net/gh/mascarell/telewidget/assets/telegram.svg" alt="TeleWidget Icon"/></a> </div> ';var r=a.querySelector(".tlgc");function A(){r.querySelector(".tlgm").style.display="none"}var i=["config"];function s(n,t){if(!n)throw Error("API method required");if(n=n.toLowerCase(),-1===i.indexOf(n))throw Error("Method ".concat(n," is not supported"));switch(n){case"config":!function(n){if(n.useAnimations&&(r.querySelector(".tlgm").classList.add("slide"),r.querySelector(".telewidget-button").classList.add("zoomIn")),n.useDarkTheme&&r.classList.add("dark"),n.message?n.useCookies&&null==document.cookie.match(/^(.*;)?\s*showmessage\s*=\s*[^;]+(.*)?$/)?(r.querySelector(".tlgm").innerHTML="".concat(n.message," <span></span>"),r.querySelector(".tlgm span").addEventListener("click",A),console.log("creating cookie"),(e=new Date).setTime(e.getTime()+2592e5),o="; expires="+e.toGMTString(),document.cookie="showmessage=no"+o+"; path=/"):n.useCookies?r.querySelector(".tlgm").remove():(r.querySelector(".tlgm").innerHTML="".concat(n.message," <span></span>"),r.querySelector(".tlgm span").addEventListener("click",A)):r.querySelector(".tlgm").remove(),n.users)try{var t=n.users[Math.floor(Math.random()*n.users.length)];r.querySelector(".telewidget-button").href="https://t.me/".concat(t)}catch(n){console.error("telewidget -> cannot select users")}var e,o;n.floatLeft&&r.classList.add("left"),n.showMessageAlways&&r.classList.add("show-message-always"),document.getElementsByTagName("body")[0].appendChild(r)}(t);break;default:console.warn("No handler defined for ".concat(n))}}!function(n){var t=n[n.ww],e=t.q;if(e)for(var o=0;o<e.length;o++)s(e[o][0],e[o][1]);(t=s).configurations={message:!1,users:!1,floatLeft:!1,showMessageAlways:!1,useCookies:!1,useAnimations:!1,useDarkTheme:!1}}(window)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,